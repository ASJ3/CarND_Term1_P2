{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Self-Driving Car Engineer Nanodegree\n",
    "\n",
    "## Deep Learning\n",
    "\n",
    "## Project: Build a Traffic Sign Recognition Classifier\n",
    "\n",
    "In this notebook, a template is provided for you to implement your functionality in stages, which is required to successfully complete this project. If additional code is required that cannot be included in the notebook, be sure that the Python code is successfully imported and included in your submission if necessary. \n",
    "\n",
    "> **Note**: Once you have completed all of the code implementations, you need to finalize your work by exporting the iPython Notebook as an HTML document. Before exporting the notebook to html, all of the code cells need to have been run so that reviewers can see the final implementation and output. You can then export the notebook by using the menu above and navigating to  \\n\",\n",
    "    \"**File -> Download as -> HTML (.html)**. Include the finished document along with this notebook as your submission. \n",
    "\n",
    "In addition to implementing code, there is a writeup to complete. The writeup should be completed in a separate file, which can be either a markdown file or a pdf document. There is a [write up template](https://github.com/udacity/CarND-Traffic-Sign-Classifier-Project/blob/master/writeup_template.md) that can be used to guide the writing process. Completing the code template and writeup template will cover all of the [rubric points](https://review.udacity.com/#!/rubrics/481/view) for this project.\n",
    "\n",
    "The [rubric](https://review.udacity.com/#!/rubrics/481/view) contains \"Stand Out Suggestions\" for enhancing the project beyond the minimum requirements. The stand out suggestions are optional. If you decide to pursue the \"stand out suggestions\", you can include the code in this Ipython notebook and also discuss the results in the writeup file.\n",
    "\n",
    "\n",
    ">**Note:** Code and Markdown cells can be executed using the **Shift + Enter** keyboard shortcut. In addition, Markdown cells can be edited by typically double-clicking the cell to enter edit mode."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Step 0: Load The Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Load pickled data\n",
    "import pickle\n",
    "\n",
    "# TODO: Fill this in based on where you saved the training and testing data\n",
    "\n",
    "training_file = 'train.p'\n",
    "validation_file= 'valid.p'\n",
    "testing_file =  'test.p'\n",
    "\n",
    "with open(training_file, mode='rb') as f:\n",
    "    train = pickle.load(f)\n",
    "with open(validation_file, mode='rb') as f:\n",
    "    valid = pickle.load(f)\n",
    "with open(testing_file, mode='rb') as f:\n",
    "    test = pickle.load(f)\n",
    "    \n",
    "X_train_orig, y_train = train['features'], train['labels']\n",
    "X_validation_orig, y_validation = valid['features'], valid['labels']\n",
    "X_test_orig, y_test = test['features'], test['labels']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Step 1: Dataset Summary & Exploration\n",
    "\n",
    "The pickled data is a dictionary with 4 key/value pairs:\n",
    "\n",
    "- `'features'` is a 4D array containing raw pixel data of the traffic sign images, (num examples, width, height, channels).\n",
    "- `'labels'` is a 1D array containing the label/class id of the traffic sign. The file `signnames.csv` contains id -> name mappings for each id.\n",
    "- `'sizes'` is a list containing tuples, (width, height) representing the original width and height the image.\n",
    "- `'coords'` is a list containing tuples, (x1, y1, x2, y2) representing coordinates of a bounding box around the sign in the image. **THESE COORDINATES ASSUME THE ORIGINAL IMAGE. THE PICKLED DATA CONTAINS RESIZED VERSIONS (32 by 32) OF THESE IMAGES**\n",
    "\n",
    "Complete the basic data summary below. Use python, numpy and/or pandas methods to calculate the data summary rather than hard coding the results. For example, the [pandas shape method](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.shape.html) might be useful for calculating some of the summary results. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Provide a Basic Summary of the Data Set Using Python, Numpy and/or Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of training examples = 34799\n",
      "Number of validation examples = 4410\n",
      "Number of testing examples = 12630\n",
      "Image data shape = (32, 32, 3)\n",
      "Number of classes = 43\n"
     ]
    }
   ],
   "source": [
    "### Replace each question mark with the appropriate value. \n",
    "### Use python, pandas or numpy methods rather than hard coding the results\n",
    "\n",
    "# TODO: Number of training examples\n",
    "n_train = len(X_train_orig)\n",
    "\n",
    "# TODO: Number of validation examples\n",
    "n_validation = len(X_validation_orig)\n",
    "\n",
    "# TODO: Number of testing examples.\n",
    "n_test = len(X_test_orig)\n",
    "\n",
    "# TODO: What's the shape of an traffic sign image?\n",
    "image_shape = X_train_orig[0].shape\n",
    "\n",
    "# TODO: How many unique classes/labels there are in the dataset.\n",
    "# each label value in the y_train dataset corresponds to a class. \n",
    "unique_class_values = set(y_train)\n",
    "n_classes = len(unique_class_values)\n",
    "print(\"Number of training examples =\", n_train)\n",
    "print(\"Number of validation examples =\", n_validation)\n",
    "print(\"Number of testing examples =\", n_test)\n",
    "\n",
    "print(\"Image data shape =\", image_shape)\n",
    "#print(\"Values of classes =\", v_classes)\n",
    "print(\"Number of classes =\", n_classes)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ClassId                     SignName\n",
      "      0         Speed limit (20km/h)\n",
      "      1         Speed limit (30km/h)\n",
      "      2         Speed limit (50km/h)\n",
      "      3         Speed limit (60km/h)\n",
      "      4         Speed limit (70km/h)\n",
      "      5         Speed limit (80km/h)\n",
      "      6  End of speed limit (80km/h)\n",
      "      7        Speed limit (100km/h)\n",
      "...\n",
      "\n",
      "Shape of datframe: (43, 2)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "sign_names = pd.read_csv('signnames.csv')\n",
    "print(sign_names.head(n=8).to_string(index=False))\n",
    "print(\"...\")\n",
    "print(\"\\nShape of datframe:\", sign_names.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train count: Counter({2: 2010, 1: 1980, 13: 1920, 12: 1890, 38: 1860, 10: 1800, 4: 1770, 5: 1650, 25: 1350, 9: 1320, 7: 1290, 3: 1260, 8: 1260, 11: 1170, 18: 1080, 35: 1080, 17: 990, 14: 690, 31: 690, 33: 599, 15: 540, 26: 540, 28: 480, 23: 450, 30: 390, 6: 360, 16: 360, 34: 360, 22: 330, 36: 330, 20: 300, 40: 300, 21: 270, 39: 270, 24: 240, 29: 240, 27: 210, 32: 210, 41: 210, 42: 210, 0: 180, 19: 180, 37: 180})\n",
      "\n",
      "Test count: Counter({2: 750, 1: 720, 13: 720, 12: 690, 38: 690, 4: 660, 10: 660, 5: 630, 9: 480, 25: 480, 3: 450, 7: 450, 8: 450, 11: 420, 18: 390, 35: 390, 17: 360, 14: 270, 31: 270, 15: 210, 33: 210, 26: 180, 6: 150, 16: 150, 23: 150, 28: 150, 30: 150, 22: 120, 34: 120, 36: 120, 20: 90, 21: 90, 24: 90, 29: 90, 39: 90, 40: 90, 42: 90, 0: 60, 19: 60, 27: 60, 32: 60, 37: 60, 41: 60})\n",
      "\n",
      "Total number of signs in training set: 34799\n",
      "Total number of signs in testing set: 12630\n"
     ]
    }
   ],
   "source": [
    "# We need to add our sign counts for train and test to the dataframe with the sign names\n",
    "from collections import Counter\n",
    "\n",
    "# First we take our lists with the keys of each sign (i.e. y_train and y_test)\n",
    "# We create a dictionary showing the number of occurence of each sign in the training and testing sets\n",
    "train_count = Counter(y_train)\n",
    "test_count = Counter(y_test)\n",
    "\n",
    "# Printing for verificiation\n",
    "print(\"Train count:\", train_count)\n",
    "print(\"\\nTest count:\", test_count)\n",
    "\n",
    "\n",
    "train_total = 0\n",
    "for key, value in train_count.items():\n",
    "    train_total += value\n",
    "    \n",
    "test_total = 0\n",
    "for key, value in test_count.items():\n",
    "    test_total += value\n",
    "\n",
    "# Printing to verify the total number of signs in each dictionary is equal to the number of signs\n",
    "# calculated earlier (i.e. n_train and n_test)\n",
    "print(\"\\nTotal number of signs in training set:\", train_total)\n",
    "print(\"Total number of signs in testing set:\", test_total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# From each dictionary with a count of each sign, we create a list (because lists are ordered)\n",
    "# The newly created list will list in order the count of each sign in the training or testing set\n",
    "def ordered_count(aDict):\n",
    "    ordered_list = []\n",
    "    for i in range(43):\n",
    "        ordered_list.append(aDict[i])\n",
    "    return ordered_list\n",
    "\n",
    "train_ordered_count = ordered_count(train_count)\n",
    "test_ordered_count = ordered_count(test_count)\n",
    "\n",
    "# Printing for verification purposes\n",
    "#print(train_ordered_count)\n",
    "#print(test_ordered_count)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ClassId                                           SignName  Train Count  Test Count\n",
      "      0                               Speed limit (20km/h)          180          60\n",
      "      1                               Speed limit (30km/h)         1980         720\n",
      "      2                               Speed limit (50km/h)         2010         750\n",
      "      3                               Speed limit (60km/h)         1260         450\n",
      "      4                               Speed limit (70km/h)         1770         660\n",
      "      5                               Speed limit (80km/h)         1650         630\n",
      "      6                        End of speed limit (80km/h)          360         150\n",
      "      7                              Speed limit (100km/h)         1290         450\n",
      "      8                              Speed limit (120km/h)         1260         450\n",
      "      9                                         No passing         1320         480\n",
      "     10       No passing for vehicles over 3.5 metric tons         1800         660\n",
      "     11              Right-of-way at the next intersection         1170         420\n",
      "     12                                      Priority road         1890         690\n",
      "     13                                              Yield         1920         720\n",
      "     14                                               Stop          690         270\n",
      "     15                                        No vehicles          540         210\n",
      "     16           Vehicles over 3.5 metric tons prohibited          360         150\n",
      "     17                                           No entry          990         360\n",
      "     18                                    General caution         1080         390\n",
      "     19                        Dangerous curve to the left          180          60\n",
      "     20                       Dangerous curve to the right          300          90\n",
      "     21                                       Double curve          270          90\n",
      "     22                                         Bumpy road          330         120\n",
      "     23                                      Slippery road          450         150\n",
      "     24                          Road narrows on the right          240          90\n",
      "     25                                          Road work         1350         480\n",
      "     26                                    Traffic signals          540         180\n",
      "     27                                        Pedestrians          210          60\n",
      "     28                                  Children crossing          480         150\n",
      "     29                                  Bicycles crossing          240          90\n",
      "     30                                 Beware of ice/snow          390         150\n",
      "     31                              Wild animals crossing          690         270\n",
      "     32                End of all speed and passing limits          210          60\n",
      "     33                                   Turn right ahead          599         210\n",
      "     34                                    Turn left ahead          360         120\n",
      "     35                                         Ahead only         1080         390\n",
      "     36                               Go straight or right          330         120\n",
      "     37                                Go straight or left          180          60\n",
      "     38                                         Keep right         1860         690\n",
      "     39                                          Keep left          270          90\n",
      "     40                               Roundabout mandatory          300          90\n",
      "     41                                  End of no passing          210          60\n",
      "     42  End of no passing by vehicles over 3.5 metric ...          210          90\n"
     ]
    }
   ],
   "source": [
    "# Now that we have lists of signs counts we can create series\n",
    "# Then we can add the series to the dataframe\n",
    "train_se = pd.Series(train_ordered_count)\n",
    "test_se = pd.Series(test_ordered_count)\n",
    "\n",
    "sign_names['Train Count'] = train_se.values\n",
    "sign_names['Test Count'] = test_se.values\n",
    "\n",
    "# Printing the updated dataframe for verification\n",
    "new_dataframe = sign_names[['ClassId', 'SignName', 'Train Count', 'Test Count' ]]\n",
    "print(new_dataframe.to_string(index=False))\n",
    "#print(new_dataframe.tail(n=5).to_string(index=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Include an exploratory visualization of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nPv30U40bN65A8V6/fn0NGTJEb731lrp27WooTp7g4GC1bNlSp06d0qlTp3T06FG999578vf316hR\no9S6desit3P0/c1/V8bX17fAVVBPT081a9ZMPXv2LDFG/jtJx44dK9B1yNPTUw0bNtTtt99uKJ+T\nJ08WWej4+fkVuEJdkh9//FFTp04t9Hq3bt301FNPGepKtGrVKj333HMFugMGBATovvvu05QpU0rd\nn7yT7sOHD6tdu3YFrux7enoqNDTU0GdVyv2ujR07Vq+++qomTZqkI0eO6O9//7vhgl+SQkJCdPDg\nQQUGBmrbtm167LHHJOUWaGXpiifldh295557JOUWDjk5OZo/f742btyo5cuXl7pfP/zwQ5HvT9eu\nXTVhwgQ9/PDD6tq1q7744otiY1jRxp48eVJ79uzR7t277V3HWrZsqX/+85+KiIgwcigs2RcfHx9d\nuHBBNWvW1I4dO3TbbbdJyv17U9oYtvwXTj7++GMNHTq0QFvRsWNH+fn5ae7cuQWOVXE++eQTPf74\n4wWKlEaNGmnw4MGaMWOGOnfuXGqM/Mrarr333nuScrtKjx8/vlB3XKOsaJNefPFF5eTkaNKkSYVy\n8fT0VM2aNUu9m/Xuu+8qJydHjz32mF555RUFBgYWiBEUFFTihbaiNGnSRE2aNNEDDzygb775RosW\nLbLfle3du7f+9re/Fdszwqpzk9q1a2vr1q2KiorS9u3b7Z/Z8+fPl3hxtrKhELNASVeBrlRSI2VF\nHGKUXxxnc/jw4SL79YeGhuro0aOScv+4lXZX6/7779cbb7yhlStXqnv37vY/jr/++quhsWqSFBMT\no82bNxseT1aU7OxsnThxolDXvxMnThQ5ELooR48eVVhYWKHXw8LCdPz4ccO5/PXXX0WOq+nWrZtW\nrlxpKEZUVJTefvtt1a5dW6mpqbr++usl5d61y7sybSSP4uTvflKalJQUbdq0SRs2bFBiYqI6duyo\nCRMmqG3btsrIyNCyZcv03nvvFTso3JH399dff9WDDz5oLwzuuOOOAleOjcq7kzRz5kwNGTLEcJe7\nogQHByshIaHQZ2Xv3r1Ffn6K4u3trT///LPQXes///zTcNFx8eJFnT9/vtDr58+fL3Lg/pXy7tCF\nhoaqS5cuZS52ihrLce+992rGjBnq1q2bWrVqZV/HyPjKW2+9VTNmzJCfn58CAwPtY5b27t1rqDth\nfkXdXatWrZrat2+vhQsXlrq9l5eX/vzzz0LftfzvT05OToldrqxoY8eNG6fAwED17t1bd911lxo0\naFDmrr1W7Evbtm31wQcfqHHjxjp16pS9PTp+/Ljhz7wknTp1qsCJfp7q1asbnpTl7NmzRR4DNzc3\nw70wJMfbtfx3p8vqyJEjev755+Xu7q6ZM2dq6NChpoqDvGL83XffVY0aNcpcME2YMEHPP/+8AgIC\n1L9/f9WrV89U+3olm82mrVu3asOGDdqxY4eaNWummJgYnT17Vp9++ql27txZ5B08ybpzk/79+2vG\njBlasGCBrrvuOvvFwO3bt6tx48YO7qHzoBADyigjI0MrVqzQrl27dO7cuUJFQv6ucuUZo27dulqx\nYoUeeugh+5U4m82mFStW2Pu3Jycnl9q/vHXr1pozZ06BEx8pd8C00QY9KytL3333nXbu3KmGDRsW\n6CIlGZt0oEePHvrggw+UmJhoLwD379+vFStWqEePHobyqFevnlasWKGHH3640DEpy4lg69atFRcX\nV+jEZ+/evYa6jEm5+xwaGqqzZ8/qH//4h/1uxV9//WW4b3ubNm00a9YsPfLII/YT4cOHD+ujjz4q\ncWB+flOnTtX27dtVp04d9ezZU927dy/wPvv4+Oj222/XqlWrio3hyPv7+uuva/bs2QoMDNSyZct0\n8803O3SiYHRikJL07NlT8+fP1yOPPGI/+du3b58WLlyofv36GYrRt29fzZ49W/Hx8QW636xfv95w\njKioKM2cOVMPPPBAgc/8xx9/bPjurST798NmsxXZnhQ36L6ksRzffvttgQkWjIyv7Nu3r5o2baqk\npCS1b9/eflJ5zTXXlNq96ko1a9bUvn37FBAQoG3bttl7FKSmphoqOG+99Vb7+5M35vTgwYNat26d\n7r77bkm5BV5JXcesaGN79+6tuLg4ffbZZ/r9998VERGh1q1bq2XLloa/B1bsy/Dhw7V48WKdPXtW\n48ePt/d2iI+PL9Od9SZNmmjRokV69NFHC3Sn/eSTTwyPa2zTpo1mz56t0aNH29vlY8eOac6cOcXe\nlb+SFe1adna2NmzYUOwkRCUVak8++aS9XStukoyyCA0NVVpamg4cOFDkd7i4CXeOHz+uzMxMBQQE\naNmyZbrlllscal/zuiRu2bJFbm5uuummmzR48OACY+aioqKKHUcrWXducuONN6ply5b666+/ClwI\nuu6668rUPjo7txyjl5phSEpKihYuXFjsCbbRyQKsiEOM8onz73//W3FxcerWrZuuueYhZMiaAAAg\nAElEQVSaQlf2jPRxtyJG3hgONzc3eyN19OhRZWdna8KECWrevLk2bdqklJQU+wD68lLa1LhGrjxm\nZ2dr1apVWr16tf1uT3BwsPr06aPbb7/d0JXCAwcO6LXXXlNOTo79mBw5ckRubm6aMGGC4Tt833zz\njZYsWaLOnTurWbNmknJPkH/66Sfde++9BbqKlOdMcCkpKXr33Xe1c+dO+9XurKwsXXfddXr00UcN\nTbbx/vvvq2fPniV2LcybZrm4mdMceX9Hjhyphx56SB06dNDAgQPtJy9mWXERIycnR59//rk+//xz\ne7csT09P3X777YbG7OT54YcftGbNGvvd1nr16ql37972mTJLk5mZqYULF2r9+vX2EzkPDw/FxMQU\nKN5Lc+rUKb3//vv6888/i1xeXLtWlnEWJc2qVx6+/vprzZ8/Xz4+PqpZs6Zee+01ubu7a82aNdq6\ndauhNuX777/XV199pZMnT0qS6tSpo969eys6OlqS7O99cYWdlW1sWlqa4uLi7JN2HDt2TI0bN9bk\nyZMNHQ9H9yUpKUkhISGF2tGcnBx7F2ojTpw4oWnTpuns2bOqVauWJCkxMVE1atTQE088YeiC119/\n/aW3335be/bssRcNmZmZioiI0JgxY3TNNdeUGsOKdm3OnDnasGGD2rdvX+TvHDJkSLGxhw0bpqef\nflrNmjWzpF379ddf9c477ygjI0O+vr6FzgnmzZtX5HbPPvusfHx81LJlSy1btky33357se2GkR4N\nAwcOVNu2bRUTE6OOHTsWOXtkRkaG5s6dW+xFMWc6N6kMKMQs9sorrygpKUm33nprkbOLFTeQtjzi\nEKN84gwZMkRPPfVUsVNcG2FFDOm/0+GfOnVKUu4f5+jo6DJ1kbCqyLVS3jgdM93PMjIytHnz5gKz\nHUZHR5dpVr6yPEOmpOOzadMmrV27VqdPn9bLL7+s0NBQffnllwoLCzP8mZVyr3rm3x+jd/dsNpte\neeUVjRw5ssSJX8pT3iQCRlTUhZA8NptNCQkJysjIUL169cr0GbFSRkaGEhMTJUm1atUqcx55XaTu\nuuuuIk8oS5swwGazadasWerfv3+ZuqlJueN9jCpLN3Ep967P2bNn1bZtW/sx+f333+Xn5+dw22mU\n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\ngSDjKCoqUr3XjXn37l2LflYN3Py/9u49uqdr3///KzeJJASJCInUrS5xj7gEIeWoctAeSupeR1XR\n3SpFtbV79GxSTpUi3S2Oa6m03di0VE82oqFaqnEL4lIhiEjSEJJUJPn+4efzaxrU5ZPPSj7r+Rij\nY+Qz17K82rF3kveca75nTIyOHDmihIQE3bx5Uw0bNlTjxo3Vt2/f+z6oF8V9/PHHys3N1YQJE1Su\nXLli57wtWbLEoGQPLioqqsiK6+89yD648PBwnTlzRkFBQXr66ac1a9Ysbd26VTdv3qRDJ3AXmZmZ\nCgwMlCS5ublZVtpbtWpFgxuUSoWFhSooKCg2npGRofLlyxuQqGRQiME0/nieij0fEPggQkJC9OWX\nX+q1116TdOu/S1pamlavXq22bdve1zMWL16sihUrqlevXurevbvc3NxKMrJpDB482OgIVnE/3RDv\n5x7p1iGftzVr1kzz5s3T6dOn5efnR9EP3EWVKlX066+/ysfHR9WqVdPBgwdVp04dnTp16q4TJICR\nmjVrpq+//lqjR4+WdOt3k9zcXH3++edq2bKlwemsh/b1MIWIiAi1aNHC8gPnp59+UpMmTSwrDHl5\neYqPjzflzGB2drbmzJmj06dPKycnR5UrV1ZmZqbq16+vqVOn3ldR9eOPP+ro0aNKSEhQcnKyateu\nraCgIDVu3FgNGzYstpIDALCd1atXq3z58urbt692796tBQsWqGrVqkpLS9O///u/282kD+xHenq6\nZsyYocLCQqWkpKhOnTpKSUlRhQoVNH369HvuOy5LKMRgCh999NF93Td27NgSTlJ6HTt2TElJScrN\nzVXt2rXVrFmzh3pOdna2jh49qu+//167du2So6OjVq9ebeW05pGamqodO3bo0qVLGjZsmLy8vHTg\nwAF5e3srICDA6Hg2VVBQoB07dujHH3/U5cuXJUm+vr5q166dOnXqxCo3cJ8SExOVmJgoPz8/hYSE\nGB0HuKP8/Hzt2rVLZ8+etfxuEhYWZlfdmCnEAJNLS0uTj4/PIz8nKytLCQkJlr1i586dk6enpxo2\nbKhJkyZZIan5HD16VDNnzlS9evV0/PhxzZ07V9WqVdP69ev1yy+/aMKECUZHtJnCwkLNmjVLP//8\nsx577DFLS//z58/r7NmzatWqlSZPnmxwSgCANdy4ccOuCq67YY8YYHLjxo1Tw4YNFRYWpnbt2snT\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10a50a160>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.patches as mpatches\n",
    "import numpy as np\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "\n",
    "\n",
    "plt.figure(figsize=(10,4))\n",
    "\n",
    "plt.bar(np.arange(0,43), train_ordered_count, 0.9, color=\"#dd6649\")\n",
    "plt.bar(np.arange(0,43), test_ordered_count, width= 0.9, color=\"#4286f4\")\n",
    "#plt.bar(np.arange(0,43), train_ordered_count, 0.9, color=\"#dd6649\", bottom = test_ordered_count)\n",
    "\n",
    "plt.ylabel('Number of images')\n",
    "plt.title('# of Images for each Traffic Sign in the Training and Testing Sets\\n')\n",
    "\n",
    "test_bar_patch = mpatches.Patch(color='#4286f4', label='Training Set')\n",
    "train_bar_patch = mpatches.Patch(color='#dd6649', label='Testing Set')\n",
    "\n",
    "# Creating a list with all the sign names out of the sign_names dataframe\n",
    "list_sign = sign_names['SignName'].tolist()\n",
    "\n",
    "plt.xticks(np.arange(0,43)+0.45, list_sign, rotation='vertical')\n",
    "plt.legend(handles=[test_bar_patch, train_bar_patch], loc = 9)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "#new_dataframe.plot.bar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the German Traffic Signs Dataset using the pickled file(s). This is open ended, suggestions include: plotting traffic sign images, plotting the count of each sign, etc. \n",
    "\n",
    "The [Matplotlib](http://matplotlib.org/) [examples](http://matplotlib.org/examples/index.html) and [gallery](http://matplotlib.org/gallery.html) pages are a great resource for doing visualizations in Python.\n",
    "\n",
    "**NOTE:** It's recommended you start with something simple first. If you wish to do more, come back to it after you've completed the rest of the sections. It can be interesting to look at the distribution of classes in the training, validation and test set. Is the distribution the same? Are there more examples of some classes than others?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "# of the random picture chosen in the set:  22614\n",
      "Class # of picture chosen:  13\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff371638eb8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Data exploration visualization code goes here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "index = random.randint(0, len(X_train_orig))\n",
    "image = X_train_orig[index]\n",
    "\n",
    "# Visualizations will be shown in the notebook.\n",
    "%matplotlib inline\n",
    "\n",
    "print(\"\\n# of the random picture chosen in the set: \", index)\n",
    "plt.figure(figsize=(1,1))\n",
    "plt.imshow(image)\n",
    "print(\"Class # of picture chosen: \", y_train[index])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "\n",
    "## Step 2: Design and Test a Model Architecture\n",
    "\n",
    "Design and implement a deep learning model that learns to recognize traffic signs. Train and test your model on the [German Traffic Sign Dataset](http://benchmark.ini.rub.de/?section=gtsrb&subsection=dataset).\n",
    "\n",
    "The LeNet-5 implementation shown in the [classroom](https://classroom.udacity.com/nanodegrees/nd013/parts/fbf77062-5703-404e-b60c-95b78b2f3f9e/modules/6df7ae49-c61c-4bb2-a23e-6527e69209ec/lessons/601ae704-1035-4287-8b11-e2c2716217ad/concepts/d4aca031-508f-4e0b-b493-e7b706120f81) at the end of the CNN lesson is a solid starting point. You'll have to change the number of classes and possibly the preprocessing, but aside from that it's plug and play! \n",
    "\n",
    "With the LeNet-5 solution from the lecture, you should expect a validation set accuracy of about 0.89. To meet specifications, the validation set accuracy will need to be at least 0.93. It is possible to get an even higher accuracy, but 0.93 is the minimum for a successful project submission. \n",
    "\n",
    "There are various aspects to consider when thinking about this problem:\n",
    "\n",
    "- Neural network architecture (is the network over or underfitting?)\n",
    "- Play around preprocessing techniques (normalization, rgb to grayscale, etc)\n",
    "- Number of examples per label (some have more than others).\n",
    "- Generate fake data.\n",
    "\n",
    "Here is an example of a [published baseline model on this problem](http://yann.lecun.com/exdb/publis/pdf/sermanet-ijcnn-11.pdf). It's not required to be familiar with the approach used in the paper but, it's good practice to try to read papers like these."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pre-process the Data Set (normalization, grayscale, etc.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Minimally, the image data should be normalized so that the data has mean zero and equal variance. For image data, `(pixel - 128)/ 128` is a quick way to approximately normalize the data and can be used in this project. \n",
    "\n",
    "Other pre-processing steps are optional. You can try different techniques to see if it improves performance. \n",
    "\n",
    "Use the code cell (or multiple code cells, if necessary) to implement the first step of your project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.utils import shuffle\n",
    "\n",
    "# normalize() is designed to normalize an array of pictures so instead of having an array of values between 0...255\n",
    "# it is centered around 0 with values between -1 and 1\n",
    "def normalize(image_array):\n",
    "    normalizer = np.array([128,128,128])\n",
    "    image_array = np.subtract(image_array, normalizer)\n",
    "    image_array = np.divide(image_array, normalizer)\n",
    "    image_array = image_array.astype(np.float32)\n",
    "    return image_array\n",
    "\n",
    "# Normalizing all our sets of image arrays (training, validation and testing sets)\n",
    "X_train = normalize(X_train_orig)\n",
    "X_validation =  normalize(X_validation_orig)\n",
    "X_test = normalize(X_test_orig)\n",
    "\n",
    "\"\"\"\n",
    "# Checking a 'pixel' value inside an image is now a flow number\n",
    "print(X_train_orig[2369][5][8][0])\n",
    "print(type(X_train_orig[2369][5][8][0]))\n",
    "print(X_train[2369][5][8][0])\n",
    "print(type(X_train[2369][5][8][0]))\n",
    "\"\"\"\n",
    "\n",
    "# Shuffle the train data in order to avoid having the same categories in a batch \n",
    "# in case the original data was not shuffled already\n",
    "X_train, y_train = shuffle(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Architecture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "EPOCHS = 30\n",
    "BATCH_SIZE = 128"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Note: the code below is based on LeNet network, developed by Yann Lecun\n",
    "#### A few modifications have been made to the code to accomodate for a slightly different input and output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from tensorflow.contrib.layers import flatten\n",
    "\n",
    "def LeNet(x):    \n",
    "    # Arguments used for tf.truncated_normal, randomly defines variables for the weights and biases for each layer\n",
    "    mu = 0\n",
    "    sigma = 0.1\n",
    "    \n",
    "    # SOLUTION: Layer 1: Convolutional. Input = 32x32x3. Output = 32x32x6.\n",
    "    conv1_W = tf.Variable(tf.truncated_normal(shape=(5, 5, 3, 6), mean = mu, stddev = sigma))\n",
    "    conv1_b = tf.Variable(tf.zeros(6))\n",
    "    conv1   = tf.nn.conv2d(x, conv1_W, strides=[1, 1, 1, 1], padding='VALID') + conv1_b\n",
    "\n",
    "    # SOLUTION: Activation.\n",
    "    conv1 = tf.nn.relu(conv1)\n",
    "\n",
    "    # SOLUTION: Pooling. Input = 28x28x6. Output = 14x14x6.\n",
    "    conv1 = tf.nn.max_pool(conv1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='VALID')\n",
    "\n",
    "    # SOLUTION: Layer 2: Convolutional. Output = 10x10x16.\n",
    "    conv2_W = tf.Variable(tf.truncated_normal(shape=(5, 5, 6, 16), mean = mu, stddev = sigma))\n",
    "    conv2_b = tf.Variable(tf.zeros(16))\n",
    "    conv2   = tf.nn.conv2d(conv1, conv2_W, strides=[1, 1, 1, 1], padding='VALID') + conv2_b\n",
    "    \n",
    "    # SOLUTION: Activation.\n",
    "    conv2 = tf.nn.relu(conv2)\n",
    "\n",
    "    # SOLUTION: Pooling. Input = 10x10x16. Output = 5x5x16.\n",
    "    conv2 = tf.nn.max_pool(conv2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='VALID')\n",
    "\n",
    "    # SOLUTION: Flatten. Input = 5x5x16. Output = 400.\n",
    "    fc0   = flatten(conv2)\n",
    "    \n",
    "    # SOLUTION: Layer 3: Fully Connected. Input = 400. Output = 120.\n",
    "    fc1_W = tf.Variable(tf.truncated_normal(shape=(400, 120), mean = mu, stddev = sigma))\n",
    "    fc1_b = tf.Variable(tf.zeros(120))\n",
    "    fc1   = tf.matmul(fc0, fc1_W) + fc1_b\n",
    "    \n",
    "    # SOLUTION: Activation.\n",
    "    fc1    = tf.nn.relu(fc1)\n",
    "\n",
    "    # SOLUTION: Layer 4: Fully Connected. Input = 120. Output = 84.\n",
    "    fc2_W  = tf.Variable(tf.truncated_normal(shape=(120, 84), mean = mu, stddev = sigma))\n",
    "    fc2_b  = tf.Variable(tf.zeros(84))\n",
    "    fc2    = tf.matmul(fc1, fc2_W) + fc2_b\n",
    "    \n",
    "    # SOLUTION: Activation.\n",
    "    fc2    = tf.nn.relu(fc2)\n",
    "\n",
    "    # SOLUTION: Layer 5: Fully Connected. Input = 84. Output = 43 (43 traffic signs categories).\n",
    "    fc3_W  = tf.Variable(tf.truncated_normal(shape=(84, 43), mean = mu, stddev = sigma))\n",
    "    fc3_b  = tf.Variable(tf.zeros(43))\n",
    "    logits = tf.matmul(fc2, fc3_W) + fc3_b\n",
    "    \n",
    "    return logits"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train, Validate and Test the Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A validation set can be used to assess how well the model is performing. A low accuracy on the training and validation\n",
    "sets imply underfitting. A high accuracy on the training set but low accuracy on the validation set implies overfitting."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Features and Labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "x = tf.placeholder(tf.float32, (None, 32, 32, 3))\n",
    "y = tf.placeholder(tf.int32, (None))\n",
    "one_hot_y = tf.one_hot(y, 43)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Creating two learning rates\n",
    "# the smaller learning rates will be used after a certain number of epochs, to avoid divergence\n",
    "rate = 0.001\n",
    "rate_small = 0.0001\n",
    "\n",
    "logits = LeNet(x)\n",
    "cross_entropy = tf.nn.softmax_cross_entropy_with_logits(labels=one_hot_y, logits=logits)\n",
    "loss_operation = tf.reduce_mean(cross_entropy)\n",
    "optimizer = tf.train.AdamOptimizer(learning_rate = rate)\n",
    "optimizer_small = tf.train.AdamOptimizer(learning_rate = rate_small)\n",
    "training_operation = optimizer.minimize(loss_operation)\n",
    "training_operation_small = optimizer_small.minimize(loss_operation)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "correct_prediction = tf.equal(tf.argmax(logits, 1), tf.argmax(one_hot_y, 1))\n",
    "accuracy_operation = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n",
    "saver = tf.train.Saver()\n",
    "\n",
    "def evaluate(X_data, y_data):\n",
    "    num_examples = len(X_data)\n",
    "    total_accuracy = 0\n",
    "    sess = tf.get_default_session()\n",
    "    for offset in range(0, num_examples, BATCH_SIZE):\n",
    "        batch_x, batch_y = X_data[offset:offset+BATCH_SIZE], y_data[offset:offset+BATCH_SIZE]\n",
    "        accuracy = sess.run(accuracy_operation, feed_dict={x: batch_x, y: batch_y})\n",
    "        total_accuracy += (accuracy * len(batch_x))\n",
    "    return total_accuracy / num_examples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training / Validating the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training...\n",
      "\n",
      "This is EPOCH 1\n",
      "EPOCH 1 ...\n",
      "Validation Accuracy = 0.767\n",
      "\n",
      "This is EPOCH 2\n",
      "EPOCH 2 ...\n",
      "Validation Accuracy = 0.849\n",
      "\n",
      "This is EPOCH 3\n",
      "EPOCH 3 ...\n",
      "Validation Accuracy = 0.873\n",
      "\n",
      "This is EPOCH 4\n",
      "EPOCH 4 ...\n",
      "Validation Accuracy = 0.892\n",
      "\n",
      "This is EPOCH 5\n",
      "EPOCH 5 ...\n",
      "Validation Accuracy = 0.899\n",
      "\n",
      "This is EPOCH 6\n",
      "EPOCH 6 ...\n",
      "Validation Accuracy = 0.895\n",
      "\n",
      "This is EPOCH 7\n",
      "EPOCH 7 ...\n",
      "Validation Accuracy = 0.902\n",
      "\n",
      "This is EPOCH 8\n",
      "EPOCH 8 ...\n",
      "Validation Accuracy = 0.917\n",
      "\n",
      "This is EPOCH 9\n",
      "EPOCH 9 ...\n",
      "Validation Accuracy = 0.908\n",
      "\n",
      "This is EPOCH 10\n",
      "EPOCH 10 ...\n",
      "Validation Accuracy = 0.920\n",
      "\n",
      "This is EPOCH 11\n",
      "EPOCH 11 ...\n",
      "Validation Accuracy = 0.926\n",
      "\n",
      "This is EPOCH 12\n",
      "EPOCH 12 ...\n",
      "Validation Accuracy = 0.917\n",
      "\n",
      "This is EPOCH 13\n",
      "EPOCH 13 ...\n",
      "Validation Accuracy = 0.913\n",
      "\n",
      "This is EPOCH 14\n",
      "EPOCH 14 ...\n",
      "Validation Accuracy = 0.927\n",
      "\n",
      "This is EPOCH 15\n",
      "EPOCH 15 ...\n",
      "Validation Accuracy = 0.911\n",
      "\n",
      "This is EPOCH 16\n",
      "EPOCH 16 ...\n",
      "Validation Accuracy = 0.925\n",
      "\n",
      "This is EPOCH 17\n",
      "EPOCH 17 ...\n",
      "Validation Accuracy = 0.916\n",
      "\n",
      "This is EPOCH 18\n",
      "EPOCH 18 ...\n",
      "Validation Accuracy = 0.919\n",
      "\n",
      "This is EPOCH 19\n",
      "EPOCH 19 ...\n",
      "Validation Accuracy = 0.925\n",
      "\n",
      "This is EPOCH 20\n",
      "EPOCH 20 ...\n",
      "Validation Accuracy = 0.918\n",
      "\n",
      "This is EPOCH 21\n",
      "EPOCH 21 ...\n",
      "Validation Accuracy = 0.932\n",
      "\n",
      "This is EPOCH 22\n",
      "EPOCH 22 ...\n",
      "Validation Accuracy = 0.930\n",
      "\n",
      "This is EPOCH 23\n",
      "EPOCH 23 ...\n",
      "Validation Accuracy = 0.921\n",
      "\n",
      "This is EPOCH 24\n",
      "EPOCH 24 ...\n",
      "Validation Accuracy = 0.919\n",
      "\n",
      "This is EPOCH 25\n",
      "EPOCH 25 ...\n",
      "Validation Accuracy = 0.924\n",
      "\n",
      "This is EPOCH 26\n",
      "EPOCH 26 ...\n",
      "Validation Accuracy = 0.924\n",
      "\n",
      "Small learning rate: EPOCH 27\n",
      "EPOCH 27 ...\n",
      "Validation Accuracy = 0.940\n",
      "\n",
      "Small learning rate: EPOCH 28\n",
      "EPOCH 28 ...\n",
      "Validation Accuracy = 0.943\n",
      "\n",
      "Small learning rate: EPOCH 29\n",
      "EPOCH 29 ...\n",
      "Validation Accuracy = 0.943\n",
      "\n",
      "Small learning rate: EPOCH 30\n",
      "EPOCH 30 ...\n",
      "Validation Accuracy = 0.942\n",
      "\n",
      "Model saved\n"
     ]
    }
   ],
   "source": [
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    num_examples = len(X_train)\n",
    "    \n",
    "    print(\"Training...\")\n",
    "    print()\n",
    "    for i in range(EPOCHS):\n",
    "        printed_count = 0\n",
    "        X_train, y_train = shuffle(X_train, y_train)\n",
    "        for offset in range(0, num_examples, BATCH_SIZE):\n",
    "            end = offset + BATCH_SIZE\n",
    "            batch_x, batch_y = X_train[offset:end], y_train[offset:end]\n",
    "            if i < 26:\n",
    "                if printed_count < 1:\n",
    "                    print(\"This is EPOCH\", i+1)\n",
    "                    printed_count = 1\n",
    "                \n",
    "                sess.run(training_operation, feed_dict={x: batch_x, y: batch_y})\n",
    "            else:\n",
    "                if printed_count < 1:\n",
    "                    print(\"Small learning rate: EPOCH\", i+1)\n",
    "                    printed_count = 1\n",
    "                    \n",
    "                sess.run(training_operation_small, feed_dict={x: batch_x, y: batch_y})\n",
    "            \n",
    "        validation_accuracy = evaluate(X_validation, y_validation)\n",
    "        print(\"EPOCH {} ...\".format(i+1))\n",
    "        print(\"Validation Accuracy = {:.3f}\".format(validation_accuracy))\n",
    "        print()\n",
    "        \n",
    "    saver.save(sess, './lenet')\n",
    "    print(\"Model saved\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Accuracy = 1.000\n"
     ]
    }
   ],
   "source": [
    "with tf.Session() as sess:\n",
    "    saver.restore(sess, tf.train.latest_checkpoint('.'))\n",
    "\n",
    "    test_accuracy = evaluate(X_train, y_train)\n",
    "    print(\"Train Accuracy = {:.3f}\".format(test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Test the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy = 0.931\n"
     ]
    }
   ],
   "source": [
    "with tf.Session() as sess:\n",
    "    saver.restore(sess, tf.train.latest_checkpoint('.'))\n",
    "\n",
    "    test_accuracy = evaluate(X_test, y_test)\n",
    "    print(\"Test Accuracy = {:.3f}\".format(test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Step 3: Test a Model on New Images\n",
    "\n",
    "To give yourself more insight into how your model is working, download at least five pictures of German traffic signs from the web and use your model to predict the traffic sign type.\n",
    "\n",
    "You may find `signnames.csv` useful as it contains mappings from the class id (integer) to the actual sign name."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load and Output the Images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nHZPapgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff2e0584ef0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(32, 32, 3)\n",
      "<class 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "### Load the images and plot them here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "import matplotlib.image as mpimg\n",
    "import numpy as np\n",
    "\n",
    "pic_1 = mpimg.imread('0_speed_limit_20kmh.jpg')\n",
    "\n",
    "%matplotlib inline\n",
    "plt.figure(figsize=(1,1))\n",
    "plt.imshow(pic_1)\n",
    "plt.show()\n",
    "\n",
    "print(pic_1.shape)\n",
    "print(type(pic_1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n/wGJ6grRZfNgzAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff2dc1aba90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nUBPRt6dbAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff2dc34b1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff2dc32acf8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff2dc31dfd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pic_2 = mpimg.imread('3_speed_limit_60kmh.jpg')\n",
    "\n",
    "%matplotlib inline\n",
    "plt.figure(figsize=(1,1))\n",
    "plt.imshow(pic_2)\n",
    "plt.show()\n",
    "\n",
    "pic_3 = mpimg.imread('9_no_passing.jpg')\n",
    "plt.figure(figsize=(1,1))\n",
    "plt.imshow(pic_3)\n",
    "plt.show()\n",
    "\n",
    "pic_4 = mpimg.imread('14_stop.jpg')\n",
    "plt.figure(figsize=(1,1))\n",
    "plt.imshow(pic_4)\n",
    "plt.show()\n",
    "\n",
    "pic_5 = mpimg.imread('23_slippery_road.jpg')\n",
    "plt.figure(figsize=(1,1))\n",
    "plt.imshow(pic_5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of the picture array:  (5, 32, 32, 3)\n",
      "Type of the picture array:  <class 'numpy.ndarray'>\n",
      "Shape of the label array:  (5,)\n",
      "Type of the label array:  <class 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "#creating an array with all the new pictures\n",
    "new_pics = np.array([pic_1, pic_2, pic_3, pic_4, pic_5])\n",
    "new_labels = np.array([0, 3, 9, 14, 23])\n",
    "print(\"Shape of the picture array: \", new_pics.shape)\n",
    "print(\"Type of the picture array: \", type(new_pics))\n",
    "print(\"Shape of the label array: \", new_labels.shape)\n",
    "print(\"Type of the label array: \", type(new_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# normalizing the pictures in the new picture array\n",
    "new_pics = normalize(new_pics)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Predict the Sign Type for Each Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy = 0.800\n"
     ]
    }
   ],
   "source": [
    "### Run the predictions here and use the model to output the prediction for each image.\n",
    "### Make sure to pre-process the images with the same pre-processing pipeline used earlier.\n",
    "### Feel free to use as many code cells as needed.\n",
    "# Evaluate the loss and accuracy of the model for a given dataset.\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    saver.restore(sess, tf.train.latest_checkpoint('.'))\n",
    "\n",
    "    test_accuracy = evaluate(new_pics, new_labels)\n",
    "    print(\"Test Accuracy = {:.3f}\".format(test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analyze Performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### Calculate the accuracy for these 5 new images. \n",
    "### For example, if the model predicted 1 out of 5 signs correctly, it's 20% accurate on these new images."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def evaluate_high_level(X_data, y_data):\n",
    "    num_examples = len(X_data)\n",
    "    total_accuracy = 0\n",
    "    sess = tf.get_default_session()\n",
    "    for offset in range(0, num_examples, BATCH_SIZE):\n",
    "        batch_x, batch_y = X_data[offset:offset+BATCH_SIZE], y_data[offset:offset+BATCH_SIZE]\n",
    "        accuracy = sess.run(accuracy_operation, feed_dict={x: batch_x, y: batch_y})\n",
    "        total_accuracy += (accuracy * len(batch_x))\n",
    "        prediction = sess.run(correct_prediction, feed_dict={x: batch_x, y: batch_y})\n",
    "        print(\"Model accuracy:\", prediction)\n",
    "        soft_entropy = sess.run(cross_entropy, feed_dict={x: batch_x, y: batch_y})\n",
    "        print(\"Loss is: \", soft_entropy)\n",
    "        results = sess.run(logits, feed_dict = {x: batch_x})\n",
    "\n",
    "    return total_accuracy / num_examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model accuracy: [ True  True  True  True False]\n",
      "Loss is:  [  4.64450713e-04   6.03612803e-04   2.12190280e-05   0.00000000e+00\n",
      "   3.08041716e+00]\n",
      "Test Accuracy = 0.800\n"
     ]
    }
   ],
   "source": [
    "### Run the predictions here and use the model to output the prediction for each image.\n",
    "### Make sure to pre-process the images with the same pre-processing pipeline used earlier.\n",
    "### Feel free to use as many code cells as needed.\n",
    "# Evaluate the loss and accuracy of the model for a given dataset.\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    saver.restore(sess, tf.train.latest_checkpoint('.'))\n",
    "\n",
    "    test_accuracy = evaluate_high_level(new_pics, new_labels)\n",
    "    print(\"Test Accuracy = {:.3f}\".format(test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Output Top 5 Softmax Probabilities For Each Image Found on the Web"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def evaluate_detailed(X_data, y_data):\n",
    "    num_examples = len(X_data)\n",
    "    total_accuracy = 0\n",
    "    sess = tf.get_default_session()\n",
    "    for offset in range(0, num_examples, BATCH_SIZE):\n",
    "        batch_x, batch_y = X_data[offset:offset+BATCH_SIZE], y_data[offset:offset+BATCH_SIZE]\n",
    "        accuracy = sess.run(accuracy_operation, feed_dict={x: batch_x, y: batch_y})\n",
    "        total_accuracy += (accuracy * len(batch_x))\n",
    "        prediction = sess.run(correct_prediction, feed_dict={x: batch_x, y: batch_y})\n",
    "\n",
    "        soft_entropy = sess.run(cross_entropy, feed_dict={x: batch_x, y: batch_y})\n",
    "\n",
    "        results = sess.run(logits, feed_dict = {x: batch_x})\n",
    "        print(\"Logits are:\", results[0:2])\n",
    "        print(\"[...]\")\n",
    "        print(results[4])\n",
    "\n",
    "        final = sess.run(tf.nn.softmax(results))\n",
    "        print(\"\\nProbabilities are:\", final)\n",
    "        top_5 = sess.run(tf.nn.top_k(final, k=5))\n",
    "        print(\"\\nTop probabilities are:\", top_5)\n",
    "    return total_accuracy / num_examples"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each of the new images, print out the model's softmax probabilities to show the **certainty** of the model's predictions (limit the output to the top 5 probabilities for each image). [`tf.nn.top_k`](https://www.tensorflow.org/versions/r0.12/api_docs/python/nn.html#top_k) could prove helpful here. \n",
    "\n",
    "The example below demonstrates how tf.nn.top_k can be used to find the top k predictions for each image.\n",
    "\n",
    "`tf.nn.top_k` will return the values and indices (class ids) of the top k predictions. So if k=3, for each sign, it'll return the 3 largest probabilities (out of a possible 43) and the correspoding class ids.\n",
    "\n",
    "Take this numpy array as an example. The values in the array represent predictions. The array contains softmax probabilities for five candidate images with six possible classes. `tk.nn.top_k` is used to choose the three classes with the highest probability:\n",
    "\n",
    "```\n",
    "# (5, 6) array\n",
    "a = np.array([[ 0.24879643,  0.07032244,  0.12641572,  0.34763842,  0.07893497,\n",
    "         0.12789202],\n",
    "       [ 0.28086119,  0.27569815,  0.08594638,  0.0178669 ,  0.18063401,\n",
    "         0.15899337],\n",
    "       [ 0.26076848,  0.23664738,  0.08020603,  0.07001922,  0.1134371 ,\n",
    "         0.23892179],\n",
    "       [ 0.11943333,  0.29198961,  0.02605103,  0.26234032,  0.1351348 ,\n",
    "         0.16505091],\n",
    "       [ 0.09561176,  0.34396535,  0.0643941 ,  0.16240774,  0.24206137,\n",
    "         0.09155967]])\n",
    "```\n",
    "\n",
    "Running it through `sess.run(tf.nn.top_k(tf.constant(a), k=3))` produces:\n",
    "\n",
    "```\n",
    "TopKV2(values=array([[ 0.34763842,  0.24879643,  0.12789202],\n",
    "       [ 0.28086119,  0.27569815,  0.18063401],\n",
    "       [ 0.26076848,  0.23892179,  0.23664738],\n",
    "       [ 0.29198961,  0.26234032,  0.16505091],\n",
    "       [ 0.34396535,  0.24206137,  0.16240774]]), indices=array([[3, 0, 5],\n",
    "       [0, 1, 4],\n",
    "       [0, 5, 1],\n",
    "       [1, 3, 5],\n",
    "       [1, 4, 3]], dtype=int32))\n",
    "```\n",
    "\n",
    "Looking just at the first row we get `[ 0.34763842,  0.24879643,  0.12789202]`, you can confirm these are the 3 largest probabilities in `a`. You'll also notice `[3, 0, 5]` are the corresponding indices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logits are: [[  44.88630676   37.21177673  -21.66762733  -47.72222137   22.0649662\n",
      "    10.37674427   -9.67597866  -12.32123375   -6.67182016  -62.17993546\n",
      "   -35.09745026  -40.36177063  -62.1362114   -82.18600464  -43.27279663\n",
      "   -37.47757721  -37.46923065  -33.89438629   -3.71460509  -52.04966354\n",
      "    -6.20784426  -40.54773331  -49.66146469  -26.18574333  -22.89234543\n",
      "   -43.48011017  -48.8201561   -39.4630127   -41.1484375     1.0578264\n",
      "   -42.03946304  -14.10147095  -26.33756065  -26.94042397  -61.93175125\n",
      "   -37.1951561   -57.56845093  -21.05101585  -29.6577282   -46.89458847\n",
      "    -7.83249855  -45.19423294  -27.08935928]\n",
      " [ -46.93860245   10.5608511    59.22833633   66.64057922  -42.50639343\n",
      "    44.69357681  -20.32196808  -34.59162903   -6.39392376  -35.95347977\n",
      "   -39.30615234  -41.50081253  -73.85321045  -45.98867798  -43.99225235\n",
      "    -0.73698741  -61.57890701  -79.45085907  -48.93322372  -55.32754517\n",
      "   -35.87707901  -38.68273163  -90.43432617  -59.86635971  -85.97419739\n",
      "   -45.58368301  -92.45413971  -36.85820007   -9.91635323  -11.92577267\n",
      "   -69.88926697   16.06489944  -36.4822998   -60.3837738   -53.80192566\n",
      "   -66.29214478  -39.42381287 -126.07836914  -21.47787476  -75.21773529\n",
      "   -67.01767731  -81.23983765  -57.98195648]]\n",
      "[...]\n",
      "[ -8.45384369e+01  -4.23521500e+01  -3.74863358e+01  -2.31615448e+01\n",
      "  -1.09604225e+02  -8.73151112e+00  -7.59845591e+00  -6.60760117e+01\n",
      "  -1.01652481e+02  -3.31775475e+01   8.87553978e+00   1.35793238e+01\n",
      "  -5.90093689e+01  -1.05034737e+02  -6.51409225e+01  -1.27654083e+02\n",
      "  -3.68190231e+01  -5.71355743e+01  -3.21110840e+01   2.45405617e+01\n",
      "   9.80953425e-02   2.90805969e+01  -8.87738571e+01   2.60944843e+01\n",
      "  -4.52128487e+01  -1.14862430e+00  -5.41104813e+01  -5.93073425e+01\n",
      "  -4.50227776e+01  -2.41782608e+01   4.72726107e-01   2.58035069e+01\n",
      "  -6.53893585e+01  -5.52461205e+01  -6.49894180e+01  -6.91086807e+01\n",
      "  -5.49671669e+01  -8.09333038e+01  -8.38262405e+01  -9.68060226e+01\n",
      "  -6.04812355e+01  -3.14866848e+01  -4.46202126e+01]\n",
      "\n",
      "Probabilities are: [[  9.99535680e-01   4.64293116e-04   1.24678852e-29   0.00000000e+00\n",
      "    1.22635443e-10   1.02916578e-15   2.01232639e-24   1.42849361e-25\n",
      "    4.05870671e-23   0.00000000e+00   1.83355523e-35   9.48481197e-38\n",
      "    0.00000000e+00   0.00000000e+00   0.00000000e+00   1.69675047e-36\n",
      "    1.71097188e-36   6.10629826e-35   7.81072210e-22   0.00000000e+00\n",
      "    6.45491747e-23   7.87531250e-38   0.00000000e+00   1.36018602e-31\n",
      "    3.66354908e-30   0.00000000e+00   0.00000000e+00   2.32999120e-37\n",
      "    4.31900393e-38   9.23275671e-20   1.77181257e-38   2.40841854e-26\n",
      "    1.16859726e-31   6.39508541e-32   0.00000000e+00   2.25045466e-36\n",
      "    0.00000000e+00   2.30984121e-29   4.22410222e-33   0.00000000e+00\n",
      "    1.27148987e-23   0.00000000e+00   5.51017444e-32]\n",
      " [  0.00000000e+00   4.41186091e-25   6.03450520e-04   9.99396563e-01\n",
      "    0.00000000e+00   2.93951585e-10   1.70758924e-38   0.00000000e+00\n",
      "    1.91098574e-32   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "    0.00000000e+00   0.00000000e+00   0.00000000e+00   5.47058595e-30\n",
      "    0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "    0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "    0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "    5.64267916e-34   7.56492030e-35   0.00000000e+00   1.08392492e-22\n",
      "    0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "    0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "    0.00000000e+00   0.00000000e+00   0.00000000e+00]\n",
      " [  0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "    0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "    0.00000000e+00   9.99978781e-01   6.26529956e-17   0.00000000e+00\n",
      "    1.68700605e-36   8.54179696e-38   0.00000000e+00   0.00000000e+00\n",
      "    1.21576397e-20   0.00000000e+00   0.00000000e+00   1.42903573e-23\n",
      "    2.14796293e-16   0.00000000e+00   0.00000000e+00   1.37510230e-24\n",
      "    0.00000000e+00   1.68814087e-34   0.00000000e+00   0.00000000e+00\n",
      "    5.25720726e-17   0.00000000e+00   6.43773380e-30   0.00000000e+00\n",
      "    1.09910867e-37   0.00000000e+00   3.97264067e-29   1.95822328e-21\n",
      "    0.00000000e+00   2.06304912e-35   0.00000000e+00   0.00000000e+00\n",
      "    2.23511449e-30   2.11810493e-05   2.39141385e-23]\n",
      " [  2.20404518e-38   1.88535879e-28   4.37377569e-25   1.15089307e-13\n",
      "    1.15869993e-34   1.61987361e-25   1.13125444e-34   0.00000000e+00\n",
      "    2.72815421e-35   8.67334393e-32   7.15369149e-30   4.88355483e-36\n",
      "    3.55511838e-27   8.84983298e-27   1.00000000e+00   5.85030922e-23\n",
      "    0.00000000e+00   8.91531309e-31   0.00000000e+00   0.00000000e+00\n",
      "    0.00000000e+00   9.69016817e-35   0.00000000e+00   0.00000000e+00\n",
      "    0.00000000e+00   5.45617014e-37   5.03990598e-27   0.00000000e+00\n",
      "    3.85872840e-38   4.17639401e-28   1.42832149e-35   0.00000000e+00\n",
      "    4.85604870e-26   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "    0.00000000e+00   0.00000000e+00   2.62685019e-31   0.00000000e+00\n",
      "    0.00000000e+00   0.00000000e+00   0.00000000e+00]\n",
      " [  0.00000000e+00   8.63368568e-32   1.12044999e-29   1.86453333e-23\n",
      "    0.00000000e+00   3.44710513e-17   1.07036814e-16   0.00000000e+00\n",
      "    0.00000000e+00   8.33058397e-28   1.52791502e-09   1.68626812e-07\n",
      "    0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "    2.18374877e-29   3.27971860e-38   2.42010758e-27   9.71251633e-03\n",
      "    2.35560974e-13   9.10005510e-01   0.00000000e+00   4.59400862e-02\n",
      "    4.94096973e-33   6.77111158e-14   6.75488279e-37   0.00000000e+00\n",
      "    5.97524533e-33   6.74552830e-24   3.42613036e-13   3.43417078e-02\n",
      "    0.00000000e+00   2.16977323e-37   0.00000000e+00   0.00000000e+00\n",
      "    2.86791089e-37   0.00000000e+00   0.00000000e+00   0.00000000e+00\n",
      "    1.15567607e-39   4.51863186e-27   8.93698086e-33]]\n",
      "\n",
      "Top probabilities are: TopKV2(values=array([[  9.99535680e-01,   4.64293116e-04,   1.22635443e-10,\n",
      "          1.02916578e-15,   9.23275671e-20],\n",
      "       [  9.99396563e-01,   6.03450520e-04,   2.93951585e-10,\n",
      "          1.08392492e-22,   4.41186091e-25],\n",
      "       [  9.99978781e-01,   2.11810493e-05,   2.14796293e-16,\n",
      "          6.26529956e-17,   5.25720726e-17],\n",
      "       [  1.00000000e+00,   1.15089307e-13,   5.85030922e-23,\n",
      "          4.37377569e-25,   1.61987361e-25],\n",
      "       [  9.10005510e-01,   4.59400862e-02,   3.43417078e-02,\n",
      "          9.71251633e-03,   1.68626812e-07]], dtype=float32), indices=array([[ 0,  1,  4,  5, 29],\n",
      "       [ 3,  2,  5, 31,  1],\n",
      "       [ 9, 41, 20, 10, 28],\n",
      "       [14,  3, 15,  2,  5],\n",
      "       [21, 23, 31, 19, 11]], dtype=int32))\n",
      "\n",
      "List of correct labels:\n",
      " [ 0  3  9 14 23]\n"
     ]
    }
   ],
   "source": [
    "### Run the predictions here and use the model to output the prediction for each image.\n",
    "### Make sure to pre-process the images with the same pre-processing pipeline used earlier.\n",
    "### Feel free to use as many code cells as needed.\n",
    "# Evaluate the loss and accuracy of the model for a given dataset.\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    saver.restore(sess, tf.train.latest_checkpoint('.'))\n",
    "\n",
    "    test_accuracy = evaluate_detailed(new_pics, new_labels)\n",
    "print(\"\\nList of correct labels:\\n\", new_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Project Writeup\n",
    "\n",
    "Once you have completed the code implementation, document your results in a project writeup using this [template](https://github.com/udacity/CarND-Traffic-Sign-Classifier-Project/blob/master/writeup_template.md) as a guide. The writeup can be in a markdown or pdf file. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Note**: Once you have completed all of the code implementations and successfully answered each question above, you may finalize your work by exporting the iPython Notebook as an HTML document. You can do this by using the menu above and navigating to  \\n\",\n",
    "    \"**File -> Download as -> HTML (.html)**. Include the finished document along with this notebook as your submission."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
